AdaPT.full.MSE <- colMeans(do.call(rbind.data.frame, lapply(agg_results,function(x) (x$ada_full_CI[1,] -x$ada_full_CI[2,])**2 )),na.rm=TRUE)
STAR.full.MSE <- colMeans(do.call(rbind.data.frame, lapply(agg_results,function(x) (x$STAR_full_CI[1,] -x$STAR_full_CI[2,])**2 )),na.rm=TRUE)
df_MSE <- cbind(BH.mask.MSE,AdaPT.mask.MSE,STAR.mask.MSE,BH.full.MSE,AdaPT.full.MSE,STAR.full.MSE)
rownames(df_MSE) <- alpha.list
colnames(df_MSE) <- c('BH Blurred','AdaPT Blurred','STAR Blurred','BH Full','AdaPT Full','STAR Full')
df_MSE <- melt(df_MSE)
df_MSE<- cbind(df_MSE,do.call(rbind,strsplit(as.character(df_MSE$Var2),split=" ")))
BH.mask.num_in <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) x$BH_mask_CI[3,])),na.rm=TRUE)
AdaPT.mask.num_in <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) x$ada_mask_CI[3,])),na.rm=TRUE)
STAR.mask.num_in <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) x$STAR_mask_CI[3,])),na.rm=TRUE)
BH.full.num_in <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) x$BH_full_CI[3,])),na.rm=TRUE)
AdaPT.full.num_in <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) x$ada_full_CI[3,])),na.rm=TRUE)
STAR.full.num_in <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) x$STAR_full_CI[3,])),na.rm=TRUE)
df_num_in <- cbind(BH.mask.num_in,AdaPT.mask.num_in,STAR.mask.num_in,BH.full.num_in,AdaPT.full.num_in,STAR.full.num_in)
rownames(df_num_in) <- alpha.list
colnames(df_num_in) <- c('BH Blurred','AdaPT Blurred','STAR Blurred','BH Full','AdaPT Full','STAR Full')
BH.mask.num <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) !is.na(x$BH_mask_CI[3,])*x$BH_mask_CI[4,])),na.rm=TRUE)
AdaPT.mask.num <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) !is.na(x$ada_mask_CI[3,])*x$ada_mask_CI[4,])),na.rm=TRUE)
STAR.mask.num <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) !is.na(x$STAR_mask_CI[3,])*x$STAR_mask_CI[4,])),na.rm=TRUE)
BH.full.num <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) (!is.na(x$BH_full_CI[3,])*1)*x$BH_full_CI[4,])),na.rm=TRUE)
AdaPT.full.num <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) (!is.na(x$ada_full_CI[3,])*1)*x$ada_full_CI[4,])),na.rm=TRUE)
STAR.full.num <- colSums(do.call(rbind.data.frame, lapply(agg_results,function(x) (!is.na(x$STAR_full_CI[3,])*1)*x$STAR_full_CI[4,])),na.rm=TRUE)
df_num <-cbind(BH.mask.num,AdaPT.mask.num,STAR.mask.num,BH.full.num,AdaPT.full.num,STAR.full.num)
rownames(df_num) <- alpha.list
colnames(df_num) <- c('BH Blurred','AdaPT Blurred','STAR Blurred','BH Full','AdaPT Full','STAR Full')
df_FCR <- 1- df_num_in / df_num
rownames(df_FCR) <- alpha.list
colnames(df_FCR) <- c('BH Blurred','AdaPT Blurred','STAR Blurred','BH Full','AdaPT Full','STAR Full')
df_FCR <- melt(df_FCR)
df_FCR<- cbind(df_FCR,do.call(rbind,strsplit(as.character(df_FCR$Var2),split=" ")))
df_FCR <- cbind("FCR",df_FCR)
df_power <- cbind("Power",df_power)
df_CI_length <- cbind("CI Length",df_CI_length)
df_MSE <- cbind("MSE",df_MSE)
df_FDP <- cbind("FDP",df_FDP)
colnames(df_FDP) <- c("Metric","TargetLevel","ID","Value","Procedure","Splitting")
colnames(df_power) <- c("Metric","TargetLevel","ID","Value","Procedure","Splitting")
colnames(df_CI_length) <- c("Metric","TargetLevel","ID","Value","Procedure","Splitting")
colnames(df_MSE) <- c("Metric","TargetLevel","ID","Value","Procedure","Splitting")
colnames(df_FCR) <- c("Metric","TargetLevel","ID","Value","Procedure","Splitting")
res<- cbind(mu,tau,rbind(df_FDP,df_power,df_CI_length,df_MSE,df_FCR))
return(res)
}
files <- list.files(path="results/results_interactive",  full.names=TRUE, recursive=FALSE)
alpha.list <- seq(0.01, 0.3, 0.01)
for(i in 1:length(files)){
print(i)
mu = strsplit(files[i],"_")[[1]][5]
tau = as.numeric(strsplit(files[i],"_")[[1]][4])
type = strsplit(files[i],"_")[[1]][3]
t1 <- get_summary(files[i],alpha.list,mu,tau)
if(i==1){
agg = cbind(type,t1)
}
else{
agg = rbind(agg, cbind(type,t1))
}
}
t1 <- agg[agg$Splitting=="Full" & agg$tau == 0.1,]
ds <- agg[agg$Splitting=="Blurred",]
for(i in 1:9/10) {
t_temp <- t1
t_temp$tau = i
ds = rbind(ds,t_temp)
}
ds <- ds[ds$type == "poisson",]
p1 <- ggplot(ds[ds$Metric == "FDP" & ds$TargetLevel==0.1,],
aes(x = tau, y = Value, color = Procedure,shape=Procedure,linetype=Splitting)) +
geom_line(aes(color = Procedure,linetype=Splitting), size = 0.8) +
geom_point(aes(shape = Procedure, color = Procedure), size = 1.5) +
geom_hline(yintercept=0.2,linetype="dashed",size=1) +
theme(legend.title = element_blank(),
panel.background = element_rect(fill = "white", colour = "black"),
panel.grid.major = element_line(colour = "grey", linetype = "dotted"),
panel.grid.minor = element_line(colour = "grey"),legend.position="bottom",
text = element_text(size = 15),legend.text = element_text(size = 15)) +
scale_linetype_manual(NULL,values = c('dashed','solid')) +
xlab(TeX("$\\tau$"))+
ylab("False discovery rate")
p2 <- ggplot(ds[ds$Metric == "Power" & ds$TargetLevel==0.2,],
aes(x = tau, y = Value, fill = Procedure,linetype=Splitting)) +
geom_line(aes(color = Procedure,linetype=Splitting), size = 0.8) +
geom_point(aes(shape = Procedure, color = Procedure), size = 1.5) +
theme(legend.title = element_blank(),
panel.background = element_rect(fill = "white", colour = "black"),
panel.grid.major = element_line(colour = "grey", linetype = "dotted"),
panel.grid.minor = element_line(colour = "grey"),
text = element_text(size = 15),
legend.position = "none", legend.text = element_text(size = 15)) +
scale_linetype_manual(NULL,values = c('dashed','solid')) +
xlab(TeX("$\\tau$"))+
ylab("Power")
p3 <- ggplot(ds[ds$Metric == "FCR" & ds$TargetLevel==0.2,],
aes(x = tau, y = Value, fill = Procedure,linetype=Splitting)) +
geom_line(aes(color = Procedure,linetype=Splitting), size = 0.8) +
geom_point(aes(shape = Procedure, color = Procedure), size = 1.5) +
geom_hline(yintercept=0.2,linetype="dashed",size=1) +
theme(legend.title = element_blank(),
panel.background = element_rect(fill = "white", colour = "black"),
panel.grid.major = element_line(colour = "grey", linetype = "dotted"),
panel.grid.minor = element_line(colour = "grey"),
text = element_text(size = 15), legend.position = "none", legend.text = element_text(size = 15)) +
xlab(TeX("$\\tau$")) +
ylab("False coverage rate / miscoverage rate") +
scale_linetype_manual(NULL,values = c('dashed','solid'))
p4 <- ggplot(ds[ds$Metric == "CI Length" & ds$TargetLevel==0.2,],
aes(x = tau, y = Value, fill = Procedure,linetype=Splitting)) +
geom_line(aes(color = Procedure,linetype=Splitting), size = 0.8) +
geom_point(aes(shape = Procedure, color = Procedure), size = 1.5) +
theme(legend.title = element_blank(),
panel.background = element_rect(fill = "white", colour = "black"),
panel.grid.major = element_line(colour = "grey", linetype = "dotted"),
panel.grid.minor = element_line(colour = "grey"),
text = element_text(size = 15),
legend.position = "none", legend.text = element_text(size = 15)) +
xlab(TeX("$\\tau$")) +
scale_linetype_manual(NULL,values = c('dashed','solid'))+
ylab("CI Length")
setwd("D:/GitHub/Data-Fission")
suppressPackageStartupMessages({
library(glmnet)
library(clubSandwich)
library(sandwich)
library(MASS)
library(rootSolve)
library(genlasso)
library(splines)
library(cplm)
library(quantreg)
library(parallel)
library(ggplot2)
library(dplyr)
library(magrittr)
library(tidyr)
library(rlang)
library(purrr)
library(parallel)
library(zoo)
})
source("regression_code/regression.R")
source("regression_code/sim_dat_regression.R")
scale_seq = seq(0, 0.2, length.out = 5)
p = 100
result = list()
for (scale in scale_seq) {
print(scale)
para_vary = list(list(name = "scale", value = scale),
list(name = "R", value = 500),
list(name = "p", value = p),
list(name = "beta",
value = c(1, 0, rep(1,20), rep(0, p - 31), rep(-1,9))
# value = c(1, 0, rep(1,5), rep(0, p - 10), rep(2,3))
# value = rep(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0), 10))
))
result[[as.character(scale)]] = experiment_linear(para_vary)
}
save(result, file=paste("results/regression_linear_independent.Rdata",sep = ""))
scale_seq = seq(0, 0.2, length.out = 5)
p = 100
result = list()
for (scale in scale_seq) {
print(scale)
para_vary = list(list(name = "scale", value = scale),
list(name = "R", value = 500),
list(name = "p", value = p),
list(name = "beta",
value = c(1, 0, rep(1,20), rep(0, p - 31), rep(-1,9))
# value = c(1, 0, rep(1,5), rep(0, p - 10), rep(2,3))
# value = rep(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0), 10))
))
result[[as.character(scale)]] = experiment_linear(para_vary)
}
save(result, file=paste("results/regression_linear_independent.Rdata",sep = ""))
scale_seq = seq(0, 0.2, length.out = 5)
p = 100
result = list()
for (scale in scale_seq) {
print(scale)
para_vary = list(list(name = "scale", value = scale),
list(name = "R", value = 500),
list(name = "p", value = p),
list(name = "beta",
value = c(1, 0, rep(1,20), rep(0, p - 31), rep(-1,9))
# value = c(1, 0, rep(1,5), rep(0, p - 10), rep(2,3))
# value = rep(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0), 10))
))
result[[as.character(scale)]] = experiment_linear(para_vary)
}
save(result, file=paste("results/regression_linear_independent.Rdata",sep = ""))
source("regression_code/set_up_regression.R")
source("regression_code/set_up_regression.R")
#######################################################################################################################
# Linear Regression Experiments
#######################################################################################################################
scale_seq = seq(0, 0.2, length.out = 5)
p = 100
result = list()
for (scale in scale_seq) {
print(scale)
para_vary = list(list(name = "scale", value = scale),
list(name = "R", value = 500),
list(name = "p", value = p),
list(name = "beta",
value = c(1, 0, rep(1,20), rep(0, p - 31), rep(-1,9))
# value = c(1, 0, rep(1,5), rep(0, p - 10), rep(2,3))
# value = rep(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0), 10))
))
result[[as.character(scale)]] = experiment_linear(para_vary)
}
save(result, file=paste("results/regression_linear_independent.Rdata",sep = ""))
exit
quit
quit()
source("regression_code/set_up_regression.R")
exit
quit
undebug(ls)
source("regression_code/set_up_regression.R")
influ_seq = seq(2, 6, length.out = 5)
result=list()
for (influ in influ_seq) {
para_vary = list(list(name = "rho", value = 0),
list(name = "scale", value = 1),
list(name = "R", value = 500),
list(name = "n", value = 15),
list(name = "p", value = 20),
list(name = "type", value = "independent"),
list(name = "beta",
value = c(1, rep(0,15),1,-1,1,0)),
list(name="add_influential",value=c(influ))
)
experiment_linear(para_vary)
result[[as.character(influ)]] = experiment_linear(para_vary)
}
save(result, file=paste("results/regression_linear_influential.Rdata",sep = ""))
quit
quit()
influ_seq = seq(1, 6, length.out = 6)
result=list()
for (influ in influ_seq) {
para_vary = list(list(name = "scale", value = scale),
list(name = "R", value = 500),
list(name = "n", value = 25),
list(name = "p", value = 20),
list(name = "prob",value = 0.2),
list(name = "beta",
value = c(1, rep(0,15),1,-1,1,0)),
list(name="add_influential",value=c(influ)))
result[[as.character(influ)]] = experiment_poisson(para_vary)
}
save(result, file=paste("results/regression_poisson_influential.Rdata",sep = ""))
scale_seq = seq(0, 0.5, length.out = 5)
p = 100
result = list()
for (scale in scale_seq) {
print(scale)
para_vary = list(list(name = "scale", value = scale),
list(name = "R", value = 500),
list(name = "p", value = p),
list(name = "beta",
value = c(1, 0, rep(1,20), rep(0, p - 30), rep(2,8))
# value = c(1, 0, rep(1,5), rep(0, p - 10), rep(2,3))
# value = rep(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0), 10))
))
result[[as.character(scale)]] = experiment_poisson(para_vary)
}
save(result, file=paste("results/regression_poisson_varyscale.Rdata",sep = ""))
rho_seq = seq(-0.5, 0.5, length.out = 5)
result = list()
for (rho in rho_seq) {
print(rho)
para_vary = list(list(name = "rho", value = rho),
list(name = "scale", value = 0.3),
list(name = "R", value = 100),
list(name = "p", value = 100),
list(name = "type", value = "dependent"),
list(name = "beta",
# value = c(1, 0, rep(1,20), rep(0, p - 30), rep(2,8))
value = rep(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0), 10)
# value = rep(c(1, 0, 0, 1, 0, 0, 1, 0, 0, 0), 10)
))
result[[as.character(rho)]] = experiment_poisson(para_vary)
}
save(result, file=paste("results/regression_poisson_varyRho.Rdata",sep = ""))
influ_seq = seq(1, 6, length.out = 6)
result=list()
for (influ in influ_seq) {
para_vary = list(list(name = "scale", value = scale),
list(name = "R", value = 500),
list(name = "n", value = 25),
list(name = "p", value = 20),
list(name = "prob",value = 0.2),
list(name = "beta",
value = c(1, rep(0,15),1,-1,1,0)),
list(name="add_influential",value=c(influ)))
result[[as.character(influ)]] = experiment_poisson(para_vary)
}
save(result, file=paste("results/regression_poisson_influential.Rdata",sep = ""))
scale_seq = seq(0, 0.5, length.out = 5)
p = 100
result = list()
for (scale in scale_seq) {
print(scale)
para_vary = list(list(name = "scale", value = scale),
list(name = "R", value = 500),
list(name = "p", value = p),
list(name = "beta",
value = c(1, 0, rep(1,20), rep(0, p - 30), rep(2,8))
# value = c(1, 0, rep(1,5), rep(0, p - 10), rep(2,3))
# value = rep(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0), 10))
))
result[[as.character(scale)]] = experiment_poisson(para_vary)
}
save(result, file=paste("results/regression_poisson_varyscale.Rdata",sep = ""))
setwd("D:/GitHub/masking_regression")
library(ggplot2)
set.seed(12)
X1 = c(0.3,0.7,1,1.4,1.5,2.1,2.3,1.5,1.4)
X2 = 6
Y1 = 1.5 + rnorm(length(X1),mean=0,sd=1)
Y2 = X2*2 + rnorm(1)
X = c(X1,X2)
Y = c(Y1,Y2)
Z = rnorm(length(X),mean=0,sd=1)
g_Y = Y+ Z
f_Y = Y -Z
split = c(rep("Split 1",length(X)/2),rep("Split 2",length(X)/2))
df <- data.frame(X = X, Y = Y, f_Y= f_Y, g_Y= g_Y,split = split[c(sample(1:length(X)))])
ggplot(subset(df,split == "Split 1"),aes(x=X,y=Y)) +
geom_point(size = 8,color="blue",shape="circle") +
geom_smooth(method = "lm", fill = NA,fullrange=TRUE,linetype="dashed",size=2.5) +
theme(legend.title = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white", colour = "black"),
text = element_text(size = 30),
legend.position =c(0.2,0.80), legend.text = element_text(size = 30)) +
ggtitle("Split 1") +
scale_x_continuous(limits = c(0,7))+
scale_y_continuous(limits = c(0,15))
ggsave("figures/example_highleverage_split1.pdf")
ggplot(subset(df,split == "Split 2"),aes(x=X,y=Y)) +
geom_point(size = 8,color="red",shape="square") +
geom_smooth(method = "lm", color= "red",fill = NA,fullrange=TRUE,linetype="dashed",size=2.5) +
theme(legend.title = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white", colour = "black"),
text = element_text(size = 30),
legend.position =c(0.2,0.80), legend.text = element_text(size = 30)) +
scale_x_continuous(limits = c(0,7))+
scale_y_continuous(limits = c(0,15)) +
ggtitle("Split 2")
ggsave("figures/example_highleverage_split2.pdf")
ggplot(df,aes(x=X,y=Y)) +
geom_point(size = 8) +
theme(legend.title = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white", colour = "black"),
text = element_text(size = 30),
legend.position =c(0.2,0.80), legend.text = element_text(size = 30)) +
scale_y_continuous(limits = c(0,15))
ggsave("figures/example_highleverage_fullds.pdf")
ggplot(df,aes(x=X,y=Y,color=split,shape=split)) +
geom_point(size = 8) +
geom_smooth(method = "lm", fill = NA,fullrange=TRUE,linetype="dashed",size=2.5) +
theme(legend.title = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill = "white", colour = "black"),
text = element_text(size = 30),
legend.position =c(0.2,0.80), legend.text = element_text(size = 30)) +
scale_y_continuous(limits = c(0,15))
ggsave("figures/example_highleverage_1.pdf")
ggplot(df,aes(x=X,y=f_Y)) +
geom_point(color="blue",size=8) +
geom_smooth(method = "lm", color = "blue", linetype ="dashed",fill = NA,fullrange=TRUE,size=2.5) +
theme(legend.title = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "white", colour = "black"),
text = element_text(size = 30),
legend.position = "bottom", legend.text = element_text(size =30)) +
ylab("f(Y)")+
scale_x_continuous(limits = c(0,7))+
scale_y_continuous(limits = c(0,15))
ggsave("figures/example_highleverage_2.pdf")
ggplot(df,aes(x=X,y=g_Y)) +
geom_point(color="darkgreen",size=8) +
geom_smooth(method = "lm", color= "darkgreen", linetype="dashed", fill = NA,fullrange=TRUE,size=2.5) +
theme(legend.title = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "white", colour = "black"),
text = element_text(size = 30),
legend.position = "bottom", legend.text = element_text(size = 30)) +
ylab("g(Y)")+
scale_x_continuous(limits = c(0,7))+
scale_y_continuous(limits = c(0,15))
ggsave("figuresexample_highleverage_3.pdf")
source("regression_code/set_up_regression.R")
setwd("D:/GitHub/Data-Fission")
source("regression_code/set_up_regression.R")
scale_seq = seq(0, 0.2, length.out = 5)
p = 100
result = list()
for (scale in scale_seq) {
print(scale)
para_vary = list(list(name = "scale", value = scale),
list(name = "R", value = 500),
list(name = "p", value = p),
list(name = "beta",
value = c(1, 0, rep(1,20), rep(0, p - 31), rep(-1,9))
# value = c(1, 0, rep(1,5), rep(0, p - 10), rep(2,3))
# value = rep(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0), 10))
))
result[[as.character(scale)]] = experiment_linear(para_vary)
}
save(result, file=paste("results/regression_linear_independent.Rdata",sep = ""))
rho_seq = seq(-0.5, 0.5, length.out = 5)
p = 100
result = list()
for (rho in rho_seq) {
print(rho)
para_vary = list(list(name = "rho", value = rho),
list(name = "scale", value = 0.1),
list(name = "R", value = 5),
list(name = "p", value = 100),
list(name = "type", value = "dependent"),
list(name = "beta",
value = c(1, 0, rep(1,20), rep(0, p - 31), rep(-1,9))
# value = rep(c(1, 0, 0, 1, 0, 0, 1, 0, 0, 0), 10)
))
result[[as.character(rho)]] = experiment_linear(para_vary)
}
save(result, file=paste("results/regression_linear_dependent.Rdata",sep = ""))
rho_seq = seq(-0.5, 0.5, length.out = 5)
p = 100
result = list()
for (rho in rho_seq) {
print(rho)
para_vary = list(list(name = "rho", value = rho),
list(name = "scale", value = 0.1),
list(name = "R", value = 5),
list(name = "p", value = 100),
list(name = "type", value = "dependent"),
list(name = "beta",
value = c(1, 0, rep(1,20), rep(0, p - 31), rep(-1,9))
# value = rep(c(1, 0, 0, 1, 0, 0, 1, 0, 0, 0), 10)
))
result[[as.character(rho)]] = experiment_linear(para_vary)
}
save(result, file=paste("results/regression_linear_dependent.Rdata",sep = ""))
i
rho_seq = seq(-0.5, 0.5, length.out = 5)
p = 100
result = list()
for (rho in rho_seq) {
print(rho)
para_vary = list(list(name = "rho", value = rho),
list(name = "scale", value = 0.1),
list(name = "R", value = 5),
list(name = "p", value = 100),
list(name = "type", value = "dependent"),
list(name = "beta",
value = c(1, 0, rep(1,20), rep(0, p - 31), rep(-1,9))
# value = rep(c(1, 0, 0, 1, 0, 0, 1, 0, 0, 0), 10)
))
result[[as.character(rho)]] = experiment_linear(para_vary)
}
save(result, file=paste("results/regression_linear_dependent.Rdata",sep = ""))
setwd("D:/GitHub/masking_regression")
setwd("D:/GitHub/masking_regression")
source("set_up_regression.R")
source("set_up_regression.R")
if(1){
scale_seq = seq(0, 0.2, length.out = 5)
p = 100
result = list()
for (scale in scale_seq) {
print(scale)
para_vary = list(list(name = "scale", value = scale),
list(name = "R", value = 500),
list(name = "p", value = p),
list(name = "beta",
value = c(1, 0, rep(1,20), rep(0, p - 31), rep(-1,9))
# value = c(1, 0, rep(1,5), rep(0, p - 10), rep(2,3))
# value = rep(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0), 10))
))
result[[as.character(scale)]] = experiment_linear(para_vary)
}
save(result, file=paste("results/regression_linear_independent.Rdata",sep = ""))
}
setwd("D:/GitHub/Data-Fission")
setwd("D:/GitHub/Data-Fission")
